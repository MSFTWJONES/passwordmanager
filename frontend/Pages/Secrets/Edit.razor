@page "/secrets/edit/{id}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using web.models.secrets
@inject keyvault.web.services.SecretService _secretService;
@inject NavigationManager NavManager

@attribute [Authorize]
<div class="container">
    <h1>Edit Secret</h1>
    @if (secretModel != null)
    {
        <p>Edit Stored Secret for @secretModel.name</p>
        <EditForm Model=@secretModel OnValidSubmit=@FormSubmitted>
            <DataAnnotationsValidator />
            <div class="input-group mb-3">
                <ValidationMessage For=@(() => secretModel.value) />
                @if (secretModel.Revealed == false)
                {
                    <InputText @bind-Value=secretModel.value class="form-control" id="secret" readonly />
                    <div class="input-group-append">
                        <button type="button" class="btn btn-primary" @onclick="() => Reveal(secretModel)">Reveal</button>
                    </div>
                }
                else
                {
                    <InputText @bind-Value=secretModel.value class="form-control" id="secret" />
                    <div class="input-group-append">
                        <input type="submit" class="btn btn-primary" value="Save" />
                    </div>
                }
                <div class="input-group-append">
                    <NavLink href="/secrets" class="btn btn-primary" role="button">Cancel
                    </NavLink>
                </div>
            </div>
        </EditForm>
    }
</div>
@code {
    [CascadingParameter]
    public Notification notification { get; set; }

    [Parameter]
    public string id { get; set; }
    private DetailsViewSecretModel secretModel;

    public string EditFlag
    {
        get
        {
            if (secretModel.Revealed == false)
            {
                return "true";
            }
            else
            {
                return "false";
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (id == null)
        {
            NavManager.NavigateTo("/secrets");
        }
        try
        {
            secretModel = await _secretService.Get(id);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            notification.ProcessError(ex);
        }
        finally
        {
            notification.HideLoading();
        }
    }

    private async Task Reveal(DetailsViewSecretModel secret)
    {
        notification.DisplayLoading();
        try
        {
            secret.value = (await _secretService.Reveal(secret.name)).value;
            secret.Reveal();
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            notification.ProcessError(ex);
        }
        finally
        {
            notification.HideLoading();
        }
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/secrets");
    }
    async Task FormSubmitted(EditContext editContext)
    {
        try
        {
            bool formIsValid = editContext.Validate();
            if (formIsValid && editContext.IsModified())
            {
                notification.DisplayLoading();
                await _secretService.Edit(secretModel.name, secretModel.value);
                NavManager.NavigateTo("/secrets");
            }
        }
        catch (Exception ex)
        {
            notification.ProcessError(ex);
        }
        finally
        {
            notification.HideLoading();
        }
    }

}