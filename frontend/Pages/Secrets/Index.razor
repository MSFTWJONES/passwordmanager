@page "/secrets"
@using Microsoft.AspNetCore.Authorization
@using web.models.secrets
@inject keyvault.web.services.SecretService _secretService;
@inject IJSRuntime JSRuntime

@attribute [Authorize]
<div class="container">
    @if (SecretList != null)
    {
        <h1>Your Secrets</h1>

        <table class="table">
            <thead>
                <tr>
                    <th>Secret Name</th>
                    <th>Secret</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var SecretObject in SecretList)
                {
                    <tr>
                        <td>@SecretObject.name</td>
                        <td>
                            @SecretObject.value
                            <button type="button" class="btn btn-default" aria-label="Reveal Secret"
                        @onclick="() => Reveal(SecretObject)">
                                <span class="oi oi-eye" aria-hidden="true"></span>
                            </button>
                            <button type="button" class="btn btn-default" @onclick="() => CopyTextToClipboard(SecretObject)">
                                <span class="oi oi-clipboard"></span>
                            </button>
                        </td>
                        <td><a href="/secrets/details/@SecretObject.name">View</a></td>
                        <td><a href="/secrets/edit/@SecretObject.name">Edit</a></td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <NavLink href="/secrets/add" class="btn btn-primary" role="button">Add
    </NavLink>
    <NavLink href="/" class="btn btn-primary" role="button">Home
    </NavLink>
</div>

@code {

    [CascadingParameter]
    public Notification notification { get; set; }


    private List<IndexViewSecretModel> SecretList;

    protected override async Task OnInitializedAsync()
    {
        notification.DisplayLoading();
        try
        {
            SecretList = await _secretService.GetAll();
        }
        catch (Exception ex)
        {
            notification.ProcessError(ex);
        }
        finally
        {
            notification.HideLoading();
        }
    }

    async void Reveal(IndexViewSecretModel secret)
    {
        notification.DisplayLoading();
        try
        {
            SecretList.Where(a => a.name != secret.name && a.Revealed == true).ToList().ForEach(b => b.Reveal());
            if (secret.Revealed == false)
            {
                secret.value = (await _secretService.Reveal(secret.name)).value;
            }
            secret.Reveal();
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            notification.ProcessError(ex);
        }
        finally
        {
            notification.HideLoading();
        }
    }

    private async Task CopyTextToClipboard(IndexViewSecretModel secret)
    {
        notification.DisplayLoading();
        string cBoard;
        try
        {
            cBoard = (await _secretService.Reveal(secret.name)).value;
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", cBoard);
        }
        catch (Exception ex)
        {
            notification.ProcessError(ex);
        }
        finally
        {
            notification.HideLoading();
        }
    }
}
